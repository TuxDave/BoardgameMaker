package it.spaghetticode.bgm.editor.windows;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import it.spaghetticode.bgm.core.Project;
import it.spaghetticode.bgm.editor.UiUtilsKt;
import it.spaghetticode.bgm.editor.components.JRangePicker;
import kotlin.ranges.IntRange;

import javax.swing.*;
import java.awt.*;

public class Properties extends JFrame {
    private JTabbedPane tabbedPane;
    private JPanel panel1;
    private JPanel projectPane;
    private JPanel gamePane;
    private JTextField projectName;
    private JTextArea projectDescription;
    private JButton applyButton;
    private JButton cancelButton;
    private JRangePicker gamePlayerRange;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 3, new Insets(5, 5, 5, 5), -1, -1));
        tabbedPane = new JTabbedPane();
        panel1.add(tabbedPane, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        projectPane = new JPanel();
        projectPane.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane.addTab("Project", projectPane);
        final JLabel label1 = new JLabel();
        label1.setText("Name:");
        projectPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        projectName = new JTextField();
        projectPane.add(projectName, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Description:");
        projectPane.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        projectDescription = new JTextArea();
        projectPane.add(projectDescription, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        gamePane = new JPanel();
        gamePane.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane.addTab("Game", gamePane);
        final JLabel label3 = new JLabel();
        label3.setText("Players:");
        gamePane.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gamePane.add(gamePlayerRange.$$$getRootComponent$$$(), new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        applyButton = new JButton();
        applyButton.setText("Apply");
        panel1.add(applyButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel1.add(cancelButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    public void open() {
        setTitle("Properties...");
        setVisible(true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        pack();
        setResizable(false);

        cancelButton.addActionListener(actionEvent -> dispose());
        applyButton.addActionListener(actionEvent -> saveAndExit());
    }

    private Project project;

    public Properties(Project p) {
        project = p;
        $$$setupUI$$$();
        setContentPane(panel1);

        loadData();
    }

    private void loadData() {
        projectName.setText(project.getName());
        projectDescription.setText(project.getDescription());

        gamePlayerRange.setRange(new int[]{project.getGame().getPlayerRange().getStart(), project.getGame().getPlayerRange().getEndInclusive()});
    }

    private void saveAndExit() {
        project.setName(projectName.getText());
        project.setDescription(projectDescription.getText());

        {
            int[] range = gamePlayerRange.getRange();
            project.getGame().setPlayerRange(new IntRange(range[0], range[1]));
        }

        if (!project.save()) {
            JOptionPane.showMessageDialog(this, "Error while saving changes");
        }
        dispose();
    }

    private void createUIComponents() {
        gamePlayerRange = new JRangePicker(1, UiUtilsKt.MAX_PLAYER);
    }
}
