package it.spaghetticode.bgm.editor.windows;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import it.spaghetticode.bgm.core.Project;
import it.spaghetticode.bgm.core.ProjectException;
import it.spaghetticode.bgm.editor.UiUtilsKt;
import it.spaghetticode.bgm.editor.dialogs.NewProjectDialog;
import  it.spaghetticode.bgm.editor.bgmFileFilter;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Locale;

public class Launcher extends JFrame {
    Launcher self;
    private JPanel panel1;
    private JButton newButton;
    private JButton openButton;
    private JButton settingsButton;
    private JList list1;

    public Launcher() throws HeadlessException {
        super();
        setContentPane(panel1);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setResizable(false);

        Listener l = new Listener();
        newButton.addActionListener(l);
        settingsButton.addActionListener(l);
        openButton.addActionListener(l);

        self = this;
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        pack();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 5, new Insets(5, 5, 5, 5), -1, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 22, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Boardgame Maker");
        panel1.add(label1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newButton = new JButton();
        newButton.setText("New Project");
        panel1.add(newButton, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openButton = new JButton();
        openButton.setText("Open Project");
        panel1.add(openButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        settingsButton = new JButton();
        settingsButton.setText("Settings...");
        panel1.add(settingsButton, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(2, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        list1 = new JList();
        scrollPane1.setViewportView(list1);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private void openProject(Project p, File location) {
        p.setLocation(location);
        if (p.getLocation() != null) {
            boolean warn = true;
            for (File f : p.getLocation().listFiles(bgmFileFilter.INSTANCE.toJavaFileFilter())) {
                String name = f.getName();
                name = name.substring(0, name.length() - 4);
                if (name.equals(p.getName())) {
                    warn = false;
                    break;
                }
            }
            if (warn) {
                boolean c = JOptionPane.showConfirmDialog(
                        self,
                        "Warning, the project's name doesn't match with the project file name!\n" +
                                "Do you want to continue anyway?",
                        "Warning",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE,
                        null) == 0;
                if (!c) {
                    return;
                }
            }
            UiUtilsKt.switchView(self, new Editor(p));
        } else {
            JOptionPane.showMessageDialog(self, "Unable to find the specified location!");
        }
    }

    private class Listener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            Object source = actionEvent.getSource();
            if (source == newButton) {
                NewProjectDialog d = NewProjectDialog.showDialog();
                Project p = d.getProject();
                String location = d.getLocationPath();
                if (p == null) return;
                try {
                    if (!p.save(location)) {
                        throw new ProjectException("Unable to create project in specified location!");
                    }
                } catch (ProjectException e) {
                    JOptionPane.showMessageDialog(self, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                openProject(p, new File(location + "/" + p.getName()));
            } else if (source == openButton) {
                JFileChooser dialog = new JFileChooser();
                dialog.setDialogTitle("Open existing project...");
                dialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
                dialog.setMultiSelectionEnabled(false);
                dialog.addChoosableFileFilter(bgmFileFilter.INSTANCE);
                dialog.setAcceptAllFileFilterUsed(false);
                dialog.showOpenDialog(self);
                File f = dialog.getSelectedFile();
                if (f == null) return;
                try {
                    Project p = Project.open(f);
                    openProject(p, f.getParentFile());
                } catch (FileNotFoundException e) {
                    JOptionPane.showMessageDialog(
                            self,
                            "Unable to open, project corrupted",
                            "Error",
                            JOptionPane.ERROR_MESSAGE
                    );
                }
            } else if (source == settingsButton) {
                JOptionPane.showMessageDialog(self, "No settings available yet!");
            }
        }
    }
}
